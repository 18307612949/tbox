========================================================================
The Treasure Box Library

TBOX is a mutli-platform c library for unix, windows, mac, ios, android, etc.

It includes asio, stream, network, container, algorithm, object, memory, database
string, charset, math, libc, libm, utils and other library modules.


========================================================================

features:

the stream io library
	supports file, data, http and socket source
	supports the stream filter for gzip charset and ..
	implements the multi-stream transfer using asio	

the asynchronous io library
	supports reactor and proactor mode
	using epoll, poll, select ,kqueue and iocp os system api

the database library
	supports mysql and sqlite3 database and enumerates data using the iterator mode

the xml parser library. 
	supports DOM and SAX mode and supports xpath.

the serialization and deserialization library. 
	supports xml, json, bplist, xplist, binary formats

the memory library
	implements some memory pools for optimizating memory.
	supports fast memory error detecting. it can detect the following types of bugs for the debug mode:
	1. out-of-bounds accesses to heap and globals
	2. use-after-free
	3. double-free, invalid free
	4. memory leaks

the container library
	implements hash table, single list, double list, vector, stack, queue
	and min/max heap. supports iterator mode for algorithm.

the algorithm library
	using the iterator mode
	implements find, binary find and reverse find algorithm.
	implements sort, bubble sort, quick sort, heap sort and insert sort algorithm. 
	implements count, walk items, reverse walk items, for_all and rfor_all.

the network library
	implements dns(cached), ssl(openssl and polarssl), http and cookies
	supports asynchronous io mode for dns, ssl and http using the asio and stream library

the platform library
	implements timer, faster and lower precision timer
	implements atomic and atomic64 operation
	implements spinlock, mutex, event, semaphore, thread and thread pool 
	implements file, socket operation

the charset library
	supports utf8, utf16, gbk, gb2312, uc2 and uc4
	supports big endian and little endian mode

the zip library
	supports gzip, zlibraw, zlib formats using the zlib library if exists
	implements lzsw, lz77 and rlc algorithm

the utils library
	implements base32, base64, md5 and sha algorithm
	implements assert and trace output for the debug mode

the math library
	implements random generator
	implements fast fixed-point calculation, supports 6-bits, 16-bits, 30-bits fixed-point number

the libc library
	implements lightweight libc library interfaces, the interface name contains tb_xxx prefix for avoiding conflict.
	implements strixxx strrxxx wcsixxx wcsrxxx interface extension.
	optimizates some frequently-used interface, .e.g. memset, memcpy, strcpy ... 
	implements memset_u16, memset_u32, memset_u64 extension interfaces.

the libm library
	implements lightweight libm library interfaces, the interface name contains tb_xxx prefix for avoiding conflict.
	supports float and double type.


========================================================================
usage:

1. configure
	make config|f [PLAT=linux|mac|mingw|cygwin] [ARCH=x86|x64] [DEBUG=y|n] [SMALL=y|n] [DEMO=y|n] [PROF=y|n] [ZLIB=y|n] [OPENSSL=y|n] [PREFIX=..] [BIN=] [PRE=] [SDK=]
	make config|f [PLAT=ios] [ARCH=armv6|armv7|armv7s] [DEBUG=y|n] [SMALL=y|n] [DEMO=y|n] [PROF=y|n] [ZLIB=y|n] [OPENSSL=y|n] [PREFIX=..] [BIN=] [PRE=] [SDK=5.0|5.1|6.0|..]
	make config|f [PLAT=android] [ARCH=armv5te|armv6] [DEBUG=y|n] [SMALL=y|n] [DEMO=y|n] [PROF=y|n] [ZLIB=y|n] [OPENSSL=y|n] [PREFIX=..] [BIN=] [PRE=] [NDK=..] [SDK=..]

2. build
	make [all]
	make rebuild|r
	make lipo ARCH1=armv6 ARCH2=armv7 DEBUG=[y|n] SDK=[5.0|5.1|6.0|..] // for ios 

3. update build
	make update|u

4. clean build
	make clean|c

5. install
	make prefix|p
	make install|i

6. make info
	make error|e
	make output|o
	make warning|w

7. make document
	make doc|d

8. help
	make help|h

build for linux-x86 debug
	make f PLAT=linux ARCH=x86 DEBUG=y
	make r

build for linux-x64 release
	make f PLAT=linux ARCH=x64 DEBUG=n
	make r

build for mac, auto detecting architecture
	make f PLAT=mac 
	make r

build for ios-armv7, using sdk7.1 framework
	make f PLAT=ios ARCH=armv7 SDK=7.1
	make r
	
build for ios armv7 and arm64 universal version
	make lipo ARCH1=armv7 ARCH2=arm64 SDK=7.1

build for android-armv5te, need set the ndk and toolchains directory
	make f PLAT=android ARCH=armv5te NDK=/home/xxxx/android-ndk-r9d BIN=/home/xxxx/android-ndk-r9d/toolchains/arm-linux-androideabi-4.8/prebuilt/darwin-x86_64/bin
	make r
	
build for android-armv6, if ndk and toolchains have been setted
	make f PLAT=android ARCH=armv6
	make r

build for windows using mingw
linux + i686-w64-mingw32 will be faster and better and supports for mac and cygwin + mingw
	make f PLAT=mingw ARCH=x86
	make r

build for windows using cygwin
	make f PLAT=cygwin ARCH=x86
	make r

build for linux and add cflags and ldflags
	make f PLAT=linux CFLAG="-I." LDFLAG="-L. -lxxx"
	make r

build for windows and custom complier path and prefix
	make f PLAT=mingw ARCH=x86 BIN="/home/xxx/bin" PRE="i386-mingw32-"
	make r

========================================================================
contact:

email:   	waruqi@gmail.com
source:  	git@github.com:waruqi/tbox.git
website: 	http://www.tboox.org or http://www.tboox.net
download: 	https://github.com/waruqi/tbox/archive/master.zip
qq(group): 	343118190

